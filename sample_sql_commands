-- Create a table named 'Persons' with columns for Person ID, last name, first name, address, and city
CREATE TABLE Persons (
    PersonID int,
    LastName VARCHAR(255),
    FirstName VARCHAR(255),
    Address VARCHAR(255),
    City VARCHAR(255)
);

-- Insert records into the 'Persons' table
INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)
VALUES (1, 'Smith', 'John', '31 Central Park', 'New York');

INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)
VALUES (2, 'Johnson', 'Emily', '22 Lakeview St.', 'Chicago');

INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)
VALUES (3, 'Williams', 'James', '408 Cedar Rd.', 'Seattle');

INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)
VALUES (4, 'Brown', 'Jessica', '50 Elm St.', 'Austin');

INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)
VALUES (5, 'Davis', 'Michael', '1208 Maple Ave.', 'San Francisco');

INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)
VALUES (6, 'Miller', 'Sarah', '987 Oak St.', 'Boston');

INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)
VALUES (7, 'Wilson', 'Matthew', '55 Pine St.', 'Denver');

INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)
VALUES (8, 'Moore', 'Ashley', '66 Birch Rd.', 'Miami');

INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)
VALUES (9, 'Taylor', 'Christopher', '238 Spruce St.', 'Atlanta');

INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)
VALUES (10, 'Anderson', 'Stephanie', '111 Maple Dr.', 'Las Vegas');

-- Retrieve all records from the 'Persons' table
SELECT * FROM Persons;

-- The following commented code would add a unique constraint to ensure no duplicate records are created
-- ALTER TABLE Persons ADD CONSTRAINT uc_PersonInfo UNIQUE (LastName, FirstName, Address, City);

-- The following commented code would find any duplicate records based on LastName, FirstName, Address, and City
-- SELECT LastName, FirstName, Address, City, COUNT(*)
-- FROM Persons
-- GROUP BY LastName, FirstName, Address, City
-- HAVING COUNT(*) > 1;

-- The following commented code would delete duplicate records, retaining the first entry of each set of duplicates
-- ;WITH Cte AS (
--     SELECT *,
--            ROW_NUMBER() OVER (PARTITION BY LastName, FirstName, Address, City ORDER BY PersonID) AS rn
--     FROM Persons
-- )
-- DELETE FROM Cte
-- WHERE rn > 1;

-- Switch to the 'master' database to perform operations at the server level
USE master;
GO

-- Check if the database 'temp_Delete' exists and create it if not
IF NOT EXISTS (
      SELECT name
      FROM sys.databases
      WHERE name = N'temp_Delete'
      )
   CREATE DATABASE [temp_Delete];
GO

-- Enable Query Store for 'temp_Delete' database if the SQL Server version is greater than 12
IF SERVERPROPERTY('ProductVersion') > '12'
   ALTER DATABASE [temp_Delete] SET QUERY_STORE = ON;
GO


-- Set the context to use the SuperstoreUS database
use SuperstoreUS;

-- Retrieve all records from the Orders_East table
SELECT * FROM Orders_East;

-- Retrieve all records from the Orders_East table, sorted by the City column
SELECT * FROM Orders_East ORDER BY City;

-- Retrieve all records from the Orders_East table, sorted by the Sales column in descending order
SELECT * FROM Orders_East ORDER BY Sales DESC;

-- Retrieve all records from the Orders_East table, sorted by the Quantity column in descending order
SELECT * FROM Orders_East ORDER BY Quantity DESC;

-- Retrieve all records from the Orders_East table, sorted first by State and then by Sales in descending order
SELECT * FROM Orders_East ORDER BY State, Sales DESC;

-- Retrieve the top 10 records from the Orders_East table
SELECT TOP (10) * FROM Orders_East;

-- Retrieve the top 10 records from the Orders_East table sorted by Sales in descending order
SELECT TOP (10) * FROM Orders_East ORDER BY Sales DESC;

-- Retrieve distinct categories from the Orders_East table
SELECT DISTINCT Category FROM Orders_East;

-- Retrieve distinct segments from the Orders_East table and alias the column as 'Unique Cust Seg'
SELECT DISTINCT Segment AS "Unique Cust Seg" FROM Orders_East;

-- Retrieve all records from the Orders_East table where the Category is 'Furniture'
SELECT * FROM Orders_East WHERE Category = 'Furniture';

-- Retrieve all records from the Orders_East table where the Segment is 'Corporate'
SELECT * FROM Orders_East WHERE Segment = 'Corporate';

-- Retrieve all records from the Orders_East table where the Category is 'Furniture' and the Segment is 'Corporate'
SELECT * FROM Orders_East WHERE Category = 'Furniture' AND Segment = 'Corporate';

-- Retrieve distinct Sub-Categories from the Orders_East table
SELECT DISTINCT [Sub-Category] FROM Orders_East;

-- Retrieve all records from the Orders_East table where the Sub-Category is either 'Phones', 'Art', 'Labels', or 'Paper'
SELECT * FROM Orders_East WHERE [Sub-Category] IN ('Phones', 'Art', 'Labels', 'Paper');

-- Retrieve all records from the Orders_East table where the Product Name contains 'printer'
SELECT * FROM Orders_East WHERE [Product Name] LIKE '%printer%';

-- Retrieve all records from the Orders_East table where the Product Name contains 'printer' and the Order Date is after January 1, 2017
SELECT * FROM Orders_East WHERE [Product Name] LIKE '%printer%' AND [Order Date] > '1 Jan 2017';

-- Retrieve all records from the Orders_East table where the Product Name contains 'printer', the Order Date is after January 1, 2017, and the Profit is negative
SELECT * FROM Orders_East WHERE [Product Name] LIKE '%printer%' AND [Order Date] > '1 Jan 2017' AND [Profit] < 0;
